// <auto-generated />
using System;
using Consultorio.App.Persistencia;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Consultorio.App.Persistencia.Migrations
{
    [DbContext(typeof(AppContexto))]
    partial class AppContextoModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Consultorio.App.Dominio.Cita", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("auxiliarID")
                        .HasColumnType("int");

                    b.Property<int?>("clienteID")
                        .HasColumnType("int");

                    b.Property<int?>("medicoID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("auxiliarID");

                    b.HasIndex("clienteID");

                    b.HasIndex("medicoID");

                    b.ToTable("cita");
                });

            modelBuilder.Entity("Consultorio.App.Dominio.Horario", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("FechaDisponible")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameH")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("NameH")
                        .IsUnique();

                    b.ToTable("horario");
                });

            modelBuilder.Entity("Consultorio.App.Dominio.Persona", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Genero")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.HasIndex("Documento")
                        .IsUnique();

                    b.ToTable("persona");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Persona");
                });

            modelBuilder.Entity("Consultorio.App.Dominio.Auxiliar", b =>
                {
                    b.HasBaseType("Consultorio.App.Dominio.Persona");

                    b.Property<string>("CodigoA")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Auxiliar");
                });

            modelBuilder.Entity("Consultorio.App.Dominio.Cliente", b =>
                {
                    b.HasBaseType("Consultorio.App.Dominio.Persona");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("Cliente");
                });

            modelBuilder.Entity("Consultorio.App.Dominio.Medico", b =>
                {
                    b.HasBaseType("Consultorio.App.Dominio.Persona");

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Especialidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HorarioID")
                        .HasColumnType("int");

                    b.Property<string>("RegistroRethus")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("HorarioID");

                    b.HasDiscriminator().HasValue("Medico");
                });

            modelBuilder.Entity("Consultorio.App.Dominio.Cita", b =>
                {
                    b.HasOne("Consultorio.App.Dominio.Auxiliar", "auxiliar")
                        .WithMany()
                        .HasForeignKey("auxiliarID");

                    b.HasOne("Consultorio.App.Dominio.Cliente", "cliente")
                        .WithMany()
                        .HasForeignKey("clienteID");

                    b.HasOne("Consultorio.App.Dominio.Medico", "medico")
                        .WithMany()
                        .HasForeignKey("medicoID");

                    b.Navigation("auxiliar");

                    b.Navigation("cliente");

                    b.Navigation("medico");
                });

            modelBuilder.Entity("Consultorio.App.Dominio.Medico", b =>
                {
                    b.HasOne("Consultorio.App.Dominio.Horario", "Horario")
                        .WithMany()
                        .HasForeignKey("HorarioID");

                    b.Navigation("Horario");
                });
#pragma warning restore 612, 618
        }
    }
}
